<UserControl
    x:Class="TheXDS.Ganymede.Views.WelcomeView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:local="clr-namespace:TheXDS.Ganymede.Views"
    xmlns:vm="clr-namespace:TheXDS.Ganymede.ViewModels;assembly=TestApp"
    xmlns:valueconverters="clr-namespace:TheXDS.MCART.ValueConverters;assembly=MCART.Wpf.Common"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance vm:WelcomeViewModel}"
    d:DesignHeight="450" d:DesignWidth="800">
    <Grid TextBlock.Foreground="white">
        <Grid.Resources>
            <valueconverters:NotNullToBooleanConverter x:Key="n2bc"/>
        </Grid.Resources>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Border Margin="30" Background="#b0000000">
            <DockPanel Margin="10">
                <TextBlock FontSize="36" DockPanel.Dock="top">Proteus/Ganymede</TextBlock>
                <ScrollViewer VerticalScrollBarVisibility="Auto" Margin="0,10,0,0">
                    <TextBlock TextWrapping="Wrap">
                    Welcome! This application is an illustrative example of the
                    power of Ganymede UI Framework and Proteus dynamic UI
                    generation for any type.
                    <LineBreak/>
                    <LineBreak/>
                    Ganymede implements the basic UI controls and navigation.
                    The window you're interacting with right now, is provided
                    by Ganymede. An acrylic version is also made availabe.
                    <LineBreak/>
                    <LineBreak/>
                    Proteus implements the layer in charge of dynamically
                    creating panels with interactive controls bound to a model.
                    <LineBreak/>
                    <LineBreak/>
                    Ganymede also provides of its own dialog subsystem, which
                    ViewModels can invoke and use freely, decouplig Windows
                    specific APIs from them. Every dialog is easily accessible
                    by invoking a minimal yet flexible interface model.
                    <LineBreak/>
                    <LineBreak/>
                    As this is a regular WPF application, programming for
                    Ganymede/Proteus is as easy as it can be, removing a lot of
                    the complexities of heavier frameworks.
                    </TextBlock>
                </ScrollViewer>
            </DockPanel>
        </Border>
        <Border Margin="30" Background="#b0000000" Grid.Column="1">
            <DockPanel Margin="10">
                <StackPanel DockPanel.Dock="Bottom">
                    <Button Command="{Binding TestNavigationCommand, Mode=OneWay}" Content="Open new page instance"/>
                    <Button Command="{Binding TestMessageCommand, Mode=OneWay}" Content="Test Message"/>
                    <Button Command="{Binding TestBusyCommand, Mode=OneWay}" Content="Test Busy 5 sec"/>
                    <Button Command="{Binding TestOperationCommand, Mode=OneWay}" Content="Test Operation"/>
                    <Button Command="{Binding TestCancellableOperationCommand, Mode=OneWay}" Content="Test Cancellable Operation"/>
                    <Button Command="{Binding TryProteusCommand, Mode=OneWay}" Content="Try Proteus"/>
                </StackPanel>
                <StackPanel>
                    <Button Command="{Binding LogoutCommand, Mode=OneWay}" Content="Logout"/>
                    <TextBlock>Has DataContext? <Run Text="{Binding Converter={StaticResource n2bc}, Mode=OneWay}"/></TextBlock>
                    <TextBlock TextWrapping="Wrap">Current dialog service instance: <Run Text="{Binding DialogService}"/></TextBlock>
                    <TextBlock TextWrapping="Wrap">Current navigation service instance: <Run Text="{Binding NavigationService}"/></TextBlock>
                </StackPanel>
            </DockPanel>
        </Border>
    </Grid>
</UserControl>
