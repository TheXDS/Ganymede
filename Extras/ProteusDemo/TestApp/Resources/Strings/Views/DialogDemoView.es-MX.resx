<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HelpText" xml:space="preserve">
    <value>Esta página contiene algunas demostraciones de cómo funciona el servicio de diálogos en Ganymede.

Ganymede implementa una API de diálogos que puede orientarse a distintas plataformas. Para las aplicaciones WPF, usted tiene acceso a un sistema de diálogos personalizado que se integra bien con el estilo y la interfaz de este programa. Sigue un principio de mantener el número de ventanas independientes reducidas a una, e implementa un tema y un estilo consistentes para todos los diálogos.

Como el sistema de diálogos es expandible, el servicio de diálogos incluído en Ganymede.Wpf puede incorporar nuevos diálogos sin tener que redefinir la interfaz de los mismos desde cero, siendo únicamente necesario definir e implementar lo que hace único a cada diálogo. Podrá observar esta afirmación con las distintas demostraciones aquí.</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Demostración de servicio de diálogo</value>
  </data>
  <data name="AskText" xml:space="preserve">
    <value>¿Funciona correctamente este cuadro de diálogo?</value>
  </data>
  <data name="CancellableOpTest" xml:space="preserve">
    <value>Probar diálogo de operación cancelable</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorTest" xml:space="preserve">
    <value>Probar mensaje de error</value>
  </data>
  <data name="ErrorText" xml:space="preserve">
    <value>Este es un mensaje de error.</value>
  </data>
  <data name="HelloWorld" xml:space="preserve">
    <value>¡Hola mundo!</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Mensaje</value>
  </data>
  <data name="MessageTest" xml:space="preserve">
    <value>Probar mensaje</value>
  </data>
  <data name="OperationTest" xml:space="preserve">
    <value>Probar diálogo de operación</value>
  </data>
  <data name="QuestionTest" xml:space="preserve">
    <value>Probar pregunta</value>
  </data>
  <data name="SelectItemTest" xml:space="preserve">
    <value>Probar selección de elemento</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Advertencia</value>
  </data>
  <data name="WarningTest" xml:space="preserve">
    <value>Probar mensaje de advertencia</value>
  </data>
  <data name="WarningText" xml:space="preserve">
    <value>Este es un mensaje de advertencia.</value>
  </data>
  <data name="TestTextInput" xml:space="preserve">
    <value>Entrada de texto</value>
  </data>
  <data name="TextInputPrompt" xml:space="preserve">
    <value>Por favor, escriba algo de texto a continuación.</value>
  </data>
  <data name="CustomDialog1" xml:space="preserve">
    <value>Veces ejecutado</value>
  </data>
  <data name="OperationDemo1" xml:space="preserve">
    <value>Estableciendo conexión...</value>
  </data>
  <data name="OperationDemo2" xml:space="preserve">
    <value>Escribiendo a objeto {0}...</value>
  </data>
  <data name="OperationDemo3" xml:space="preserve">
    <value>Limpiando...</value>
  </data>
  <data name="OperationDemo4" xml:space="preserve">
    <value>Cancelando...</value>
  </data>
  <data name="SelectDemo1" xml:space="preserve">
    <value>Opción {0}</value>
  </data>
  <data name="SelectDemo2" xml:space="preserve">
    <value>Seleccionar opción</value>
  </data>
  <data name="SelectDemo3" xml:space="preserve">
    <value>Seleccione una opción desde el combo box a continuación:</value>
  </data>
  <data name="SelectDemo4" xml:space="preserve">
    <value>Nada seleccionado</value>
  </data>
  <data name="SelectDemo5" xml:space="preserve">
    <value>No se ha seleccionado ninguna opción en el diálogo.</value>
  </data>
  <data name="SelectDemo6" xml:space="preserve">
    <value>El usuario ha seleccionado "{0}".</value>
  </data>
  <data name="TestCredentialInput" xml:space="preserve">
    <value>Entrada de credencial</value>
  </data>
  <data name="TestCustomDialog" xml:space="preserve">
    <value>Diálogo definido por el usuario</value>
  </data>
  <data name="TestIntInput" xml:space="preserve">
    <value>Entrada de número</value>
  </data>
  <data name="TestIntRangeInput" xml:space="preserve">
    <value>Entrada de rango de números</value>
  </data>
  <data name="TestWizard" xml:space="preserve">
    <value>Probar diálogo de asistente</value>
  </data>
</root>