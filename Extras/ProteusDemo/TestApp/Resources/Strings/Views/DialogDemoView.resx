<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AskText" xml:space="preserve">
    <value>Is this dialog working correctly?</value>
  </data>
  <data name="CancellableOpTest" xml:space="preserve">
    <value>Test cancellable operation dialog</value>
  </data>
  <data name="CustomDialog1" xml:space="preserve">
    <value>Times ran</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorTest" xml:space="preserve">
    <value>Test error message</value>
  </data>
  <data name="ErrorText" xml:space="preserve">
    <value>This is an error message.</value>
  </data>
  <data name="HelloWorld" xml:space="preserve">
    <value>Hello world!</value>
  </data>
  <data name="HelpText" xml:space="preserve">
    <value>This page contains a few demos on how the dialog service works in Ganymede.

Ganymede implements a dialog API that can be tailored to different platforms. For WPF apps, you have access to a custom dialog system that integrates well with the program's styling and interface. It follows a principle of keeping the number of independent windows down to one, and implements a consistent theme and style for all of them.

As this dialog system is expandable, the dialog service included in Ganymede.Wpf can incorporate new dialogs without redefining the basic interface from scratch, instead it's just necessary to implement the actual dialog disticnt elements. You can see this while runnig through the different dialog demos here.</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="MessageTest" xml:space="preserve">
    <value>Test message</value>
  </data>
  <data name="OperationDemo1" xml:space="preserve">
    <value>Establishing connection...</value>
  </data>
  <data name="OperationDemo2" xml:space="preserve">
    <value>Writing to object {0}...</value>
  </data>
  <data name="OperationDemo3" xml:space="preserve">
    <value>Cleaning up...</value>
  </data>
  <data name="OperationDemo4" xml:space="preserve">
    <value>Cancelling...</value>
  </data>
  <data name="OperationTest" xml:space="preserve">
    <value>Test operation dialog</value>
  </data>
  <data name="QuestionTest" xml:space="preserve">
    <value>Test question</value>
  </data>
  <data name="SelectDemo1" xml:space="preserve">
    <value>Option {0}</value>
  </data>
  <data name="SelectDemo2" xml:space="preserve">
    <value>Select option</value>
  </data>
  <data name="SelectDemo3" xml:space="preserve">
    <value>Select an option from the combo box below:</value>
  </data>
  <data name="SelectDemo4" xml:space="preserve">
    <value>Nothing selected</value>
  </data>
  <data name="SelectDemo5" xml:space="preserve">
    <value>No option has been selected from the prompt.</value>
  </data>
  <data name="SelectDemo6" xml:space="preserve">
    <value>The user selected "{0}".</value>
  </data>
  <data name="SelectItemTest" xml:space="preserve">
    <value>Test item selection</value>
  </data>
  <data name="TestCredentialInput" xml:space="preserve">
    <value>Credential input</value>
  </data>
  <data name="TestCustomDialog" xml:space="preserve">
    <value>User-defined dialog</value>
  </data>
  <data name="TestIntInput" xml:space="preserve">
    <value>Number input</value>
  </data>
  <data name="TestIntRangeInput" xml:space="preserve">
    <value>Number range input</value>
  </data>
  <data name="TestTextInput" xml:space="preserve">
    <value>Text input</value>
  </data>
  <data name="TestWizard" xml:space="preserve">
    <value>Test wizard dialog</value>
  </data>
  <data name="TextInputPrompt" xml:space="preserve">
    <value>Please enter some text here.</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Dialog service demo</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="WarningTest" xml:space="preserve">
    <value>Test warning message</value>
  </data>
  <data name="WarningText" xml:space="preserve">
    <value>This is a warning.</value>
  </data>
</root>